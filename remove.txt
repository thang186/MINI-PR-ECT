void f_removerandomname(char* s)
{							//remove an element by name, can choose delete or not
    int i = 0, c = 0, p;
    fflush(stdin); // xóa bộ nhớ đệm
    f_redundant(s);
    f_firstupper(s);		// make the information match the format
    struct node* temp1, * temp2; // khai báo 2 biến con trỏ
    if (top == NULL)
    {					// check for the bottom of the stack
        printf("\n\n\t\t\t\t(~_~;) Stack is empty (~_~;)");
        return;
    }
    for (i = 0; strstr(top->info.name, s) != NULL && c != 2; i++)	// check the top until the information is not on the top 
    {
        printf("\n - Name : %s", top->info.name);
        printf("\n - ID : %s", top->info.id);
        printf("\n - Year : %d", top->info.year);
        printf("\n - Hometown : %s", top->info.address);			//check if match, diaplay all information then ask for deleting or not
        printf("\n - Faculity : %s", top->info.faculity);
        printf("\n - Major : %s", top->info.major);
        printf("\n - Entry point : %0.2f", top->info.entry);
        printf("\n - accumulated point : %0.2f", top->info.accumulation);
        do
        {
            printf("\n\n\t\t\tDo you want to delete this student's information ?\n");
            printf("\t\t\t\t1. Yes\t2. No\nYOUR CHOICE IS : ");
            scanf_s("%d", &c);
            if (c == 1)							// ask for delete or not
            {
                temp1 = top;
                top = top->next;			// if want to delete, do everything like pop function
                free(temp1);
                printf("\n\n\t\t\t\t (T^T) The information has been deleted (T^T) ");
                do
                {
                    printf("\n\n\t\t\t\tDo you want to continue or end of deleting ?\n");
                    printf("\t\t\t\t1. Continue\t2. End of deleting\nYOUR CHOICE IS : ");
                    scanf_s("%d", &p);
                    if (p == 2)
                        return;
                    if (p != 1 && p != 2)
                      printf("\n\n\t\t\t\t***Invalid choice, please select again ***");
                } while (p != 1);
            }
            else
            {
                if (c != 1 && c != 2)
                {
                    printf("\n\n\t\t\t***Invalid choice, please select again ***");
                }
            }
        } while (c != 1 && c != 2);
    }
    temp1 = top->next;
    temp2 = top;				// now the information we want to find not on the top
    while (temp1 != NULL)
    {
        if (strstr(temp1->info.name, s) != NULL)
        {
            printf("\n - Name : %s", temp1->info.name);
            printf("\n - ID : %s", temp1->info.id);
            printf("\n - Year : %d", temp1->info.year);
            printf("\n - Hometown : %s", temp1->info.address);			//check if match, diaplay all information then ask for deleting or not
            printf("\n - Faculity : %s", temp1->info.faculity);
            printf("\n - Major : %s", temp1->info.major);
            printf("\n - Entry point : %0.2f", temp1->info.entry);
            printf("\n - accumulated point : %0.2f", temp1->info.accumulation);
            i++;
            do
            {
                printf("\n\n\t\t\tDo you want to delete this student's information ?\n");
                printf("\t\t\t\t1. Yes\t2. No\nYOUR CHOICE IS : ");
                scanf_s("%d", &c);
                switch (c)
                {
                case 1:
                    temp2->next = temp1->next;
                    free(temp1);					// cases for deleting or not 
                    temp1 = temp2;
                    printf("\n\t\t\t\t (T^T) This student has been deleted (T^T) ");
                    do
                    {
                        printf("\n\n\t\t\t\tDo you want to continue or end of deleting ?\n");
                        printf("\t\t\t\t1. Continue\t2. End of deleting\nYOUR CHOICE IS : ");
                        scanf_s("%d", &p);
                        if (p == 2)
                            return;
                        if (p != 1 && p != 2)
                            printf("\n\n\t\t\t\t***Invalid choice, please select again ***");
                    } while (p != 1);
                    break;
                case 2:
                    break;
                default:
                    printf("\n\n\t\t\t***Invalid choice, please select again ***");
                    break;
                }
            } while (c != 1 && c != 2);

        }
        temp2 = temp1;
        temp1 = temp1->next;				// moving paralelly between temp1 and temp2, temp1 is always below the temp2 in the stack	     
    }
    if (i == 0)
        printf("\n\t\t\t\t(ToT) No result for the name you want (ToT)\n");
    else
        printf("\n\n\t\t\t\t(^u^) This is the end of searching ! (^u^)");
}
